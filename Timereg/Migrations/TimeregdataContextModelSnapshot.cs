// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Timereg.Data;

namespace Timereg.Migrations
{
    [DbContext(typeof(TimeregdataContext))]
    partial class TimeregdataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Timereg.Models.Timeregdata.Employee", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.HasKey("userid");

                    b.ToTable("employee", "public");
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.Project", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Projectname")
                        .HasColumnType("text");

                    b.Property<string>("color")
                        .HasColumnType("text");

                    b.Property<string>("projectcode")
                        .HasColumnType("text");

                    b.Property<DateTime>("validfrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("validto")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("projects", "public");
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.Timeused", b =>
                {
                    b.Property<int>("tid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Timefrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Timeto")
                        .HasColumnType("datetime");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("usedtime")
                        .HasColumnType("interval");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("workdate")
                        .HasColumnType("datetime");

                    b.HasKey("tid");

                    b.HasIndex("projectid");

                    b.HasIndex("userid");

                    b.ToTable("Timeused", "public");
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.UserProject", b =>
                {
                    b.Property<int>("Upid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("Upid");

                    b.HasIndex("projectid");

                    b.HasIndex("userid");

                    b.ToTable("UserProject", "public");
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.VTimeused", b =>
                {
                    b.Property<string>("Projectname")
                        .HasColumnType("text");

                    b.Property<string>("color")
                        .HasColumnType("text");

                    b.Property<string>("projectcode")
                        .HasColumnType("text");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int>("tid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("timefrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("timeto")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("usedtime")
                        .HasColumnType("interval");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("workdate")
                        .HasColumnType("datetime");

                    b.ToTable("V_Timeused", "public");
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.VTimeusedPeruser", b =>
                {
                    b.Property<string>("Projectname")
                        .HasColumnType("text");

                    b.Property<int>("Totalminuts")
                        .HasColumnType("integer");

                    b.Property<string>("projectcode")
                        .HasColumnType("text");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.Property<int>("workmonth")
                        .HasColumnType("integer");

                    b.Property<int>("workyear")
                        .HasColumnType("integer");

                    b.ToTable("V_TimeusedPeruser", "public");
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.VUserProject", b =>
                {
                    b.Property<string>("Projectname")
                        .HasColumnType("text");

                    b.Property<int>("Upid")
                        .HasColumnType("integer");

                    b.Property<string>("projectcode")
                        .HasColumnType("text");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("validfrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("validto")
                        .HasColumnType("datetime");

                    b.ToTable("v_UserProject", "public");
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.VUserWithTime", b =>
                {
                    b.Property<int>("UserTime")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.Property<int>("workmonth")
                        .HasColumnType("integer");

                    b.Property<int>("workyear")
                        .HasColumnType("integer");

                    b.ToTable("V_UserWithTime", "public");
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.Timeused", b =>
                {
                    b.HasOne("Timereg.Models.Timeregdata.Project", "Project")
                        .WithMany("Timeuseds")
                        .HasForeignKey("projectid");

                    b.HasOne("Timereg.Models.Timeregdata.Employee", "Employee")
                        .WithMany("Timeuseds")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Timereg.Models.Timeregdata.UserProject", b =>
                {
                    b.HasOne("Timereg.Models.Timeregdata.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("projectid");

                    b.HasOne("Timereg.Models.Timeregdata.Employee", "Employee")
                        .WithMany("UserProjects")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });


#pragma warning restore 612, 618
        }
    }
}
